#version 330 core

in vec3 normalRes;
in vec3 fragPos;
// the input variable from the vertex shader (same name and same type)  
// add input fragPos
//in vec3 vertex_color;

// Output data
out vec4 fragColor;

uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{
	float ka = 0.4;
	vec3 ambient = ka * lightColor;
	vec3 norm = normalize(normalRes);
	vec3 lightDir = normalize(lightPos - fragPos);
	float kd = 1; //diffuse coeff of the material
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = kd * diff * lightColor;
	float ks = 0.6;
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir,reflectDir), 0.0), 32);
	vec3 specular = ks * spec * lightColor; 
	vec4 coral = vec4(1.0f, 0.5f, 0.31f, 1);
	fragColor = vec4(ambient + lightColor + diffuse,1) * coral;



}